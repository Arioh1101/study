GIT это система контроля версий. 
Представь ситуацию, в которой ты и твоя команда разрабатываете проект. 
Для обмена файлов с написанным кодом, файлами конфигурации, медиа и т.д. вы можете пересылать их друг другу по почте (старый добрый архив).
Однако программисты не могут так сделать это самостоятельно. (спасибо GPT, я это даже оставлю)
Однако, на примере Python, вы можете использовать разные версии языка, на которых может не поддерживаться определнный набор команд.
Более того, при импорте библиотек так же надо учитывать версию.
Кроме того, редактируя один и тот же файл, кому то будет необходимо склеивать файлы разных версий.
Для решения эти проблем и существует git.
К слову разница между git и github - как разница между порно и порнхаб. :)

Потому тут я опишу самые базовые команды, необходимые для работы с git. Кроме того, я опишу процесс генерации SSH ключа и добавления его в свой аккаунт github.


Для самого начала работы тебе понадобится поставить VSCode (в процессе можешь выбрать свою IDE, однако на старте рекомендую ее - на мой вкус в ней самый удобный интерфейс).
Кроме того, если ты используешь не UNIX систему, тебе понадобится поставить виртуальную машину - WSL. Инструкция - https://21-school-by-students.notion.site/VSCode-WSL2-ef99f0cb37d44ffead6daef4ff41cd96

Далее приступим к созданию SSH ключа. Если коротко, SSH ключ - это уникальный набор символов, которыйи идентифицирует тебя. Более подробно узнаешь в Школе :)
Для генерации SSH ключа используется команда ssh-keygen. Обрати внимание, что ввести ее следует в терминале виртуальной машины (можно открыть сразу в VSCode после подключения к WSL)
Принято создавать ключ в корневой директории (читай - папке) системы.

После этого у тебя создастся папка .ssh, в которой будет 2 файла - id_rsa и id_rsa.pub
id_rsa хранит твой личный ключ, его никому сообщать нельзя. id_rsa.pub хранит публичный ключ, его можно использовать для подключения к github
Как же получить содержимое этого файла (и любых других кстати тоже)?
Для этого в UNIX системах (и далее речь пойдет только о них, команды для Windows немного отличаются, можешь их гуглить по мере востребованности) используется команда cat.
Попробуй ввести cat id_rsa.pub. Вывелось?
Не переживай, если вывелась ошибка. Вероятнее всего ты просто не перешла в папку .ssh.
Для того, чтобы все таки вывести содержимое этого файла, тебе необходимо указать путь к этому файлу, а не просто его название - cat .ssh/id_rsa.pub
Либо же перейти сначала в нужную папку - cd .ssh а затем уже выполнить cat id_rsa.pub
Как ты поняла, cd переводит тебя в указанную папку

После получения SSH ключа тебе необходимо добавить его в свой аккаунт github. В общем виде поле для SSH ключей находится в настройках аккаунта -> SSH and GPG keys.

Для того, чтобы скачать проект, тебе необходимо скопировать SSH проекта и в терминале написать
git clone <SSH проекта>
Эта команда клонирует проект на локальную машину (на твой ноут короче)

Для того, чтобы проверить проект, тебе необходимо написать
git status

На нем ты увидишь ветку, на которой ты сейчас находишься. 
Для того, чтобы понять, что такое понять что такое ветка, представь себе дерево.
На каждой ветки растут листья, программисты, каждый из которых работает над своей веткой, которые затем сливаются в конечный проект - ствол дерева.

В разработке изменения вносяться именно в ветку, которые затем сливаются (если что, командой git merge, или же непосредственно на гитхабе), когда руководитель проекта подтверждает изменения.

Для переключения на ветку (ты же не хочешь заруинить проект? :) ) используй команду git switch <название ветки> или git checkout <название ветки>
Однако, так как пока что существует только одна (главная) ветка, то тебе нужно создать новую ветку и переключаться на нее.
Для этого в команде git checkout -b <название ветки> создастся новая ветка и переключится на нее. Обрати внимание, тут мы используем флаг -b - именно он создает ветку перед переключением на нее.

Предположим что ты выполнила какую то работу и хочешь добавить свои труды на гитхаб. Как же это сделать?
Для этого тебе надо добавить свои изменения в локальный гит, затем закоммитить их (по аналогии с "закомментить"), а уже затем загрузить их (запушить)
git add *
git commit -m "Твое сообщение об изменениях"
git push origin <название ветки>

* означает, что надо запушить все файлы из текущей директории (привет, регулярные выражения! Ты с ними еще не раз столкнешься)

На этом все :) Конечно, гит содержит в себе куда больше функционала, который ты будешь изучать по ходу своего обучения

Немного дополнительной информации
git pull origin <название ветки> - если у тебя уже склонирован проект, то эта команда просто обновит его содержимое в соответствии с веткой, которую ты укажешь (origin - это в текущую ветку, которая уже открыта)
mkdir <название директории> - создать директорию
touch <название файла> - создать файл
rm <название файла> - удалить файл


Ну и напоследок небольшое дз:
Чтобы убедится, что ты освоила базовые команды гита, создай какой нибудь файл в проекте, и напиши в нем что нибудь (можешь сделать как истинный прогер через VIM - с ним разберешься сама, если хочешь)
После чего залей свои изменения в проект :)
Ну и можешь поиграться с папками и файлами :)


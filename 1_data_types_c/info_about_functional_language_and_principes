Так как в дальнейшем мы будем рассматривать язык программирования С, то было бы полезно рассказать о принципах построения программ на С.

Но для начала немного истории.

Первые программы писались на машинном языке - языке, в котором не было привычных нам слов, каждому символу соответствовал определенный код.
Ты могла видеть старые фотографии, на которых люди сидят с огромными словарями.

В последствии от такого подхода отказались, в пользу более понятных человеку команд. Так усложнился компилятор, который теперь преобразовывал код в машинный код, затем в бинарный, и уже его выполняла машина.

В тот момент была популярна команда безусловного перехода (goto) - она переводила работу программы на другую строку.
Таким образом программисты того времени сидели теперь не со словарями, а с полотнами кода, листая их то в начало, то в конец.

В результате появилась необходимость оптимизировать процесс написания и разработки программ.

И именно так, в 1966 году была разработана теорема Бене-Якопини. Она заложила основы программирования, каким мы его видим сейчас.
Теорема утверждает, что любая программа может быть построена с использованием 3 контрольных структур:
 - последовательность
 - ветвление
 - цикл

 Что это значит? Это значит, что любая программа должна писаться последовательно сверху вниз (без всяких прыжков при помощи оператора безусловного перехода),
 с использованием ветвлений (при помощи условных операторов), и циклов, для избежания повторения кода.

 Данная теорема значительно упростила процесс разработки и по сути своей дала старт программированию как направлению.
 С ее помощью программы стали намного более понятными, поддерживаемыми и тестируемыми.

 Что это значит для тебя?
 ПЕРВОЕ ПРАВИЛО - НЕ ИСПОЛЬЗУЙ ОПЕРАТОР БЕЗУСЛОВНОГО ПЕРЕХОДА GOTO.
 ВТОРОЕ ПРАВИЛО (негласное) - твои программы должны состоять из 3 контрольных структур: последовательность, ветвление, цикл. Правильное их использование сделает твой код крайне удобным для понимания и даже ускорит работу программы.

 На сегодняшний день языки программирования делятся в основном на функциональные и объектно-ориентированные (однако это не значит, что есть только такие, например, существует предметно ориентированные языки).

 Язык С формально является процедурным языком, но в нем можно реализовать и функциональный подход к разработке.

Как следует из названия, функциональный подход подразумевает создание функций, которые затем вызываются по мере необходимости.
ООП же опирается на разработку объектов и классов (подробнее узнаешь, когда столкнешься с ООП, это произойдет на основе на языке С++).

Функциональный язык появился как дальнейшее развитие теоремы Бене-Якопини (стало вполне очевидным, что можно разбить одно полотно на кусочки, которые к тому же можно перевызывать)
ООП же возник позже, когда программы стали очень большими и разносторонними. (но опять же, столкнешься позже)


По правилам принято вести разработку с функциональным подходом следующим образом: 
1 - сверху вниз. Сначала идет главная функция, затем все менее значимые
2 - одна функция выполняет строго одну задачу
3 - функция должна возвращать строго одно значение (формально, многие требуют в теле функции, то есть внутри нее, только один return - возврат результата выполнения функции
но многие (и я лично) считают, что их может быть несколько, например в случае ветвления)

Приведу пример функции, для простейшей программы - вывода Hello world в консоль.

void main() {
    printf("Hello world\n");
}

void - показывает что функция ничего не возвращает (возвращает "пустоту")
main - это главная функция - по сути именно она запускается при запуске программы. в скобках указываются аргументы, которая должна принять эта функция - в нашем случае она ничего не должна принимать.
printf - вывод в консоль. 
\n - перевод на следующую строку.

Перейдем к коду.
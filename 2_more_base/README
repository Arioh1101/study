В данном уроке я расскажу тебе о:
- Makefile: зачем он нужен, как его использовать (теория по нему в этом же файле ниже)
- is_even - способы определения четности числа
- ternar - расширим знания о условных операторах путем использования тернарных операторов
- factorial - на примере получения факториала рассмотрим рекурсию
- и расскажу немного более про циклы (тоже в этом же файле, ниже)


Makefile
========
Нужен для сборки проекта. Ты наверное заметила, что для компиляции надо постоянно писать gcc (файлы). А ведь мы еще не затрагивали
компиляцию с флагами -Wall -Werror -Wextra (покажут возможные косяки, неиспользованные переменные и т.д.), не собирали проект из 10 файлов и т.д.
Makefile представляет собой универсальный файл, в который ты сможешь сохранять универсальные (это важно!) команды для сборки проекта,
задавать цели на проверки по стилю и утечкам памяти, обеспечивать сборку на любой ОС и многое другое.
В начале файла пишутся переменные, которые затем можно использовать (CC, CC_FLAGS и так далее).
Затем задаются цели, для каждой из которых пишутся команды. Если перед выполнением этих команд надо выполнить еще что-то, эти цели указывается после двоеточия.
В простом примере, который я написал для этой недели, можешь ознакомится подробнее.
Несмотря на то, что возможно сейчас тебе кажется не сильно важным и нужным использовать Makefile, для больших проектов - незаменим
Так же добавлю файл Makefile_example, в который помещу свой make из проекта матриц.

находясь в директории с Makefile ты сможешь запускать его командой make (название цели). команда make (без цели) является аналогом make all.

циклы
======
ты уже знакома с циклом for. 
Однако до сиз пор ты писала только что то простое
for (int i = 0, i < 10, i++) 
Просто упомяну, что условия внутри цикла могут быть составными (например, пока i<10 || x > 1, где х - число, которое мы например будем делить на
числа от 1 до 10 до тех пор, пока х больше 1)
Точно так же можно сразу задавать несколько итераторов в цикле (например, i = 0, j = 0, k = 0, i<10, i++, ++j, k--)

Однако часто тебе будет нужно выполнять какое то действие не какое то фиксированное кол-во раз, а до тех пор, пока не будет выполнено условие
Для этого существует цикл while (x<100)
Например
int x = 1;
int n = 1;
while (x < 100) {
    x *= n;
    n++;
}
Обрати внимание, такой цикл может выолняться бесконечно
И это можно использовать себе во благо!
Например использовать while (choice != 4) в старых уроках (где 4 - это выход из программы)
Тогда такая программа будет выполняться до тех пор, пока ты сама не захочешь выйти из нее.
Пример - в файлике whiles.c
Так же обрати внимание, что для этого примера я создал 2 файла - whiles.c и whiles.h
whiles.c тебе известен
а вот файлы с расширением .h называют заголовными - они нужны для объявления функций, импорта библиотек, объявления констант и прочее.

И в мэйке я создал цель, в которой не указывал все файлы, а просто указал общее название, указав, что нужно взять все расширения этого файла

На этом этот небольшой урок все :)
Домашнего задания я не дам, ты можешь сама поэкспериментировать, однако во время созвона я выдам тебе большой проект (по твоей же просьбе)